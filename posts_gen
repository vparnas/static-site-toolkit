#!/bin/bash

sep="#"

function name_linkify
{
	echo "$1" | awk '{print gensub("[[:space:]]", "-", "g", tolower($0))}'
}

# TODO: configurable to select the category html name format (include extension in link?)
function gen_categories
{
	main_html="categories.html"

	echo -e "<h2>Categories</h2>\n<ul>" > "$main_html"
	cats_counts=$(sed '1d' "$1" | awk -F "$sep" '{if ($5) print $5}' | sort | uniq -ci)
	while read -r count cat; do
		fname=$(name_linkify "$cat")
		echo "Generating $fname.html"
		gen_archives "$1" "$cat" > "$fname.html"
		echo "<li><a href='/$fname/'>$cat</a> ($count)</li>" >> "$main_html"
	done <<< "$cats_counts"
	echo "</ul>" >> "$main_html"
	echo "Generating $main_html"
}

# Generate an archives file for all or specific category
# $1: posts CSV
# $2: (optional) category
function gen_archives
{
	# TODO: category link in lowercase one-word format 
	[ -z "$2" ] && echo "<h2>Archives</h2>" || echo "<h2>Category - $2</h2>"
	sed '1d' "$1" | awk -F "$sep" -v cat="$2" \
		'{if ($1 && (!cat || tolower($5) == tolower(cat)))\
			{print "<p>"$1" | <a href=\""$4"\" title=\""$3"\">"$3"</a>";\
			if (!cat) print " | Category: "$5; print "</p>"}}'
}

function gen_index
{
	# TODO: category link in lowercase one-word format 
	echo "<h2>All Articles</h2>"
	sed '1d' "$1" | awk -F "$sep" '{if ($1) {print \
"<article class=\"hentry\">\n\
	<header><h2 class=\"entry-title\">\n\
		<a href=\""$4"\" title=\""$3"\">"$3"</a></h2>\n\
	</header>\n\
	<footer class=\"post-info\">\n\
		<time class=\"published\" datetime=\""$1"\">"$1"</time>"; \
	if ($5) print "\
		| Category: "$5; print "\
	</footer>\n</article>\n"}}'
}

# TODO: Exclude draft posts

function gen_csv
{
	echo "date"$sep"modified"$sep"title"$sep"href"$sep"category"$sep"summary"
	cd "$1" && find . -iregex '.*\.md' -type f -exec awk -v sep="$sep" '
	BEGIN {IGNORECASE=1; FS=":[[:space:]]*"}
		/^date:/{d=$2} 
		/^modified:/{m=$2} 
		/^title:/{t=$2} 
		/^category:/{c=$2} 
		/^summary:/{s=$2} 
		/^\s*$/{nextfile}
	END {
	href=FILENAME;
	sub("\\.md$", "/", href);
	sub("^\\.", "", href); 
	print d sep m sep t sep href sep c sep s}' {} \; | sort -rn
}

function help
{
	echo "-c <dir path>: generate generic CSV"
	echo "-a <csv> [category]: generate archives file"
	echo "-i <csv>: generate index file"
	echo "-C <csv> : generate categories indeces"
	echo "-h: this help"
}

[ -n "$1" ] && [ -z "$2" ] && echo "Must provide valid input" && exit 1

while getopts "achiC" o; do 
    case "${o}" in
        a) gen_archives "$2" "$3"; exit 0;;
        c) gen_csv "$2"; exit 0;;
        C) gen_categories "$2"; exit 0;;
        i) gen_index "$2"; exit 0;;
        h|*) help; exit 0;;
    esac 
done

help
