#!/bin/bash

sep="#"

function name_linkify
{
	echo "$1" | awk '{print gensub("[[:space:]]", "-", "g", tolower($0))}'
}

# TODO: configurable to select the category html name format (include extension in link?)
function gen_categories
{
	main_html="categories.html"

	echo -e "<h1>Categories</h1>\n<ul>" > "$main_html"
	cats_counts=$(sed '1d' "$1" | awk -F "$sep" '{if ($5) print $5}' | sort | uniq -ci)
	while read -r count cat; do
		fname=$(name_linkify "$cat")
		echo "Generating $fname.html"
		gen_archives "$1" "$cat" > "$fname.html"
		echo "<li><a href='/$fname/'>$cat</a> ($count)</li>" >> "$main_html"
	done <<< "$cats_counts"
	echo "</ul>" >> "$main_html"
	echo "Generating $main_html"
}

# Generate an archives file for all or specific category
# $1: posts CSV
# $2: (optional) category
function gen_archives
{
	# TODO: category link in lowercase one-word format 
	[ -z "$2" ] && echo "<h1>Archives</h1>" || echo "<h1>Category - $2</h1>"
	sed '1d' "$1" | awk -F "$sep" -v cat="$2" \
		'{if ($1 && (!cat || tolower($5) == tolower(cat)))\
			{print "<p>"$1" | <a href=\""$4"\" title=\""$3"\">"$3"</a>";\
			if (!cat) print " | Category: "$5; print "</p>"}}'
}

function gen_index
{
	# TODO: category link in lowercase one-word format 
	echo "<h2>All Articles</h2>"
	sed '1d' "$1" | awk -F "$sep" '{if ($1) {print \
"<article class=\"hentry\">\n\
	<header><h2 class=\"entry-title\">\n\
		<a href=\""$4"\" title=\""$3"\">"$3"</a></h2>\n\
	</header>\n\
	<footer class=\"post-info\">\n\
		<time class=\"published\" datetime=\""$1"\">"$1"</time>"; \
	if ($5) print "\
		| Category: "$5; print "\
	</footer>\n</article>\n"}}'
}

function gen_sitemap
{
	site_url="$2"
    cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9
http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"
xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
EOF
	IFS="#"
	sed '1d' "$1" |
	while read -r d m _ h _ _; do
        if [ -n "$m" ]; then
			lastmod="$m" 
		elif [ -n "$d" ]; then
			lastmod="$d"
		else # TODO: What date to assign for non-dated pages?
			lastmod="$(date '+%Y-%m-%d')"
		fi
		echo "<url><loc>$site_url$h</loc><lastmod>$lastmod</lastmod><priority>1.0</priority></url>"
	done

	echo "</urlset>"
}

function gen_rss
{
	site_title="$2"
	site_url="$3"
	build_date=$(date '+%a, %d %b %Y %H:%M:%S %z')

	cat <<EOF  
<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel>
	<title>$site_title</title>
	<link>$site_url</link>
	<description></description>
	<lastBuildDate>$build_date</lastBuildDate>
EOF

	IFS="#"
	sed '1d' "$1" |
	while read -r d m t h c s; do
		post_date=$(date '+%a, %d %b %Y %H:%M:%S %z' -d "$d")
		site_url_no_lead="${site_url##*/}"
		if [ -n "$s" ]; then 
            summary="$s"
        else
            #TODO
            summary=""
        fi
		cat <<EOF
	<item>
		<title>$t</title>
		<link>"$site_url$h</link>
		<description>$summary</description>
		<dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">$site_title</dc:creator>
		<pubDate>$post_date</pubDate>
		<guid isPermaLink="false">tag:$site_url_no_lead,$d:$h</guid>
	</item>
EOF
	done

	cat <<EOF
</channel></rss>
EOF
}

function gen_csv
{
	echo "date"$sep"modified"$sep"title"$sep"href"$sep"category"$sep"summary"
	cd "$1" && find . -iregex '.*\.md' -type f -exec awk -v sep="$sep" '
	BEGIN {IGNORECASE=1; FS=":[[:space:]]*"}
		/^date:/{d=$2} 
		/^modified:/{m=$2} 
		/^title:/{t=$2} 
		/^category:/{c=$2} 
		/^summary:/{s=$2} 
		/^status:/{st=$2} 
		/^\s*$/{nextfile}
	END {
	if (st ~ /draft/) exit;
	href=FILENAME;
	sub("\\.md$", "/", href);
	sub("^\\.", "", href); 
	print d sep m sep t sep href sep c sep s}' {} \; | sort -rn
}

function help
{
	echo "-c <dir path>: generate generic CSV"
	echo "-a <csv> [category]: generate archives file"
	echo "-i <csv>: generate index file"
	echo "-r <csv> <site title> <site url>: generate rss"
	echo "-m <csv> <site url>: generate site map"
	echo "-C <csv> : generate categories indeces"
	echo "-h: this help"
}

[ -n "$1" ] && [ -z "$2" ] && echo "Must provide valid input" && exit 1

while getopts "achiCrm" o; do 
    case "${o}" in
        a) gen_archives "$2" "$3"; exit 0;;
        c) gen_csv "$2"; exit 0;;
        C) gen_categories "$2"; exit 0;;
        i) gen_index "$2"; exit 0;;
        r) [ -n "$4" ] && gen_rss "$2" "$3" "$4" || echo "Need site title and url"; exit 0;;
        m) [ -n "$3" ] && gen_sitemap "$2" "$3" || echo "Need site url"; exit 0;;
        h|*) help; exit 0;;
    esac 
done

help
