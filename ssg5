#!/bin/bash
#
# Parts based on https://rgz.ee/bin/ssg5
# Copyright 2018-2019 Roman Zolotarev <hi@romanzolotarev.com>
# Others written by Vitaly Parnas <vp330@parnas.me>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

CFG_FILE="./.ssg_config"
[ -f "$CFG_FILE" ] && . "$CFG_FILE" # source config file if available
[ -z "$IGNORE_FILE" ] && IGNORE_FILE=".ssgignore"
[ -z "$INPUTDIR" ] && INPUTDIR="."
[ -z "$HEADER" ] && export HEADER="$INPUTDIR/_header.html"
[ -z "$FOOTER" ] && export FOOTER="$INPUTDIR/_footer.html"

main() {
    IGNORE=$(
        if [ -f "$SRC/$IGNORE_FILE" ]; then
            while read -r x; do
                [ -n "$x" ] || continue
                printf ' ! -path "*/%s*"' "$x"
            done < "$SRC/$IGNORE_FILE"
        fi
        printf ' ! -name "."  ! -path "*/.*" ! -path "*/_*"'
    )
    list_dirs "$SRC" | (cd "$SRC" && cpio -dpuL "$DST")
    fs=$(
        if [ -f "$DST/.files" ]; then
            list_affected_files "$SRC" "$DST/.files"
        else 
            list_files "$1"
        fi
    )
    if [ -n "$fs" ]; then
        echo "$fs" | tee "$DST/.files"
        echo "$fs" | grep -iE '\.md$|\.html$' |
            while read -r f; do
                render_file "$f"
            done
        echo "$fs" | grep -iEv '\.md$|\.html$' |
            (cd "$SRC" && cpio -dpuL "$DST")
    fi
    printf '[ssg] ' >&2
    print_status 'file, ' 'files, ' "$fs" >&2

    print_status 'url' 'urls' "$urls" >&2
    echo >&2
}

readlink_f() {
    file="$1"
    cd "$(dirname "$file")"
    file=$(basename "$file")
    while test -L "$file"
    do
        file=$(readlink "$file")
        cd "$(dirname "$file")"
        file=$(basename "$file")
    done
    dir=$(pwd -P)
    echo "$dir/$file"
}

print_status() {
    test -z "$3" && printf 'no %s' "$2" && return

    echo "$3" | awk -v singular="$1" -v plural="$2" '
    END {
        if (NR==1) 
            printf NR " " singular;
        else if (NR>1) 
            printf NR " " plural;
    }'
}

usage() {
    echo "usage: ${0##*/} src dst [title] [base_url]" >&2
    exit 1
}

no_dir() {
    echo "${0##*/}: $1: No such directory" >&2
    exit 2
}

list_dirs() {
    cd "$1" && eval "find . -type d $IGNORE"
}

list_files() {
    cd "$1" && eval "find -L . -type f $IGNORE"
}

list_dependant_files () {
    e="\\( -name '*.html' -o -name '*.md' -o -name '*.css' -o -name '*.js' \\)"
    cd "$1" && eval "find -L . -type f $IGNORE $e"
}

list_newer_files() {
    cd "$1" && eval "find -L . -type f $IGNORE -newer $2" && 
        eval "find -L . -type f -path '*/_*' -newer $2"
}


has_partials() {
    grep -qE '^./_.*\.html$|^./_.*\.js$|^./_.*\.css$'
}


list_affected_files() {
    fs=$(list_newer_files "$1" "$2")

    if echo "$fs" | has_partials
    then list_dependant_files "$1"
    else echo "$fs"
    fi
}

set_menu_items() {
    [ -z "$MENU" ] && cat && return
    menu_html=$( echo -n "<ul>\n"
    i=0
    while (( $i < ${#MENU[@]} )); do
        href="${MENU[$i]}"
        name="${MENU[$i+1]}"
        echo -n "\t<li><a href=\"$href\">$name</a></li>\n"
        i=$(( i+2 ))
    done
    echo -n "</ul>" )
    sed "/nav.*menu/I{s#.*#\0\n$menu_html#}"
}

check_and_set_page_var() {
    var=$1
    value=$2
    if [ -n "$var" ] && [ -n "$value" ]; then
        sed 's#\$'"$var"'#'"$value"'#g; /#'"$var"'/d'
    else
        sed '/#'"$var"'/,/\/#'"$var"'/d'
    fi
}

extract_metadata() {
    name="$1"
    input_file="$2"
    ext="${input_file##*.}"
    if [ "$ext" = "md" ]; then
        sed -rn '1,/^\s*$/s/^'"$name"':\s*(.*[^[:space:]])\s*$/\1/ip' "$input_file"
    else
        echo
    fi        
}

render_file() {
    f="$1"
    echo "Processing: $f"
    # Create a separate <name>/index.html for each name.md document except those exclusively named index.md
    [[ "$f" =~ index\..*$ ]] \
        && page_url="${f%index*}" || page_url="${f%.*}/"
    page_url="${page_url#.}" # remove leading . in url
    dst_file_dir="$DST/$page_url"
    dst_file="$dst_file_dir""index.html"
    input_file="$SRC/$f"

    extract_metadata "status" "$input_file" |
        grep -qi 'draft' && echo "Skip draft $f" && return
    [ -d "$dst_file_dir" ] || mkdir -p "$dst_file_dir"
    
    pagetitle="$SITE_TITLE"
    content_title=""
    ext="${f##*.}"
    if [ "$ext" = "md" ]; then
        content_title=$(extract_metadata "title" "$input_file")
        [ -n "$content_title" ] && pagetitle="$SITE_TITLE - $content_title"
    elif [ "$ext" = "html" ]; then
        first_h1=$(sed -rn '/<h1>.*<\/h1>/I{s/<h1>(.*)<\/h1>/\1/ip;q}' "$input_file")
        [ -n "$first_h1" ] && pagetitle="$SITE_TITLE - $first_h1"
    fi
    pagedate=$(extract_metadata "date" "$input_file")
    canonical=$(extract_metadata "canonical" "$input_file")
    mathjax=$(extract_metadata "mathjax" "$input_file")
    category=$(extract_metadata "category" "$input_file")
    (
    [ -f "$HEADER" ] && 
        cat "$HEADER" |
        sed -e 's#\$SITETITLE#'"$SITE_TITLE"'#g' \
        -e 's#\$PAGETITLE#'"$pagetitle"'#g'\
        -e 's#\$SITEURL#'"$BASE_URL"'#g'\
        -e 's#\$PAGEURL#'"$page_url"'#g' |
        check_and_set_page_var "CONTENT_TITLE" "$content_title" |
        check_and_set_page_var "DATE" "$pagedate" |
        check_and_set_page_var "CATEGORY" "$category" |
        check_and_set_page_var "FEED_RSS" "$FEED_RSS" |
        check_and_set_page_var "FEED_ATOM" "$FEED_ATOM" |
        check_and_set_page_var "CANONICAL" "$canonical" |
        check_and_set_page_var "FAV_ICON" "$FAV_ICON" |
        check_and_set_page_var "MATHJAX" "$mathjax" |
        set_menu_items

    if [ "$ext" = 'md' ]; then
        if test -x "$(which lowdown 2> /dev/null)"; then
            # If metadata section starts with a yaml-metadata '---', remove for lowdown compatibility
            sed '1{/^---/d}' "$input_file" | 
                lowdown -D html-skiphtml -D html-head-ids
        elif test -x "$(which Markdown.pl 2> /dev/null)"; then
            cat "$input_file" | Markdown.pl
        else
            echo "couldn't find lowdown nor Markdown.pl"
            exit 3
        fi
    elif [ "$ext" = 'html' ]; then
        cat "$input_file"
    fi
    [ -f "$FOOTER" ] && cat "$FOOTER"
    ) | links_rel_to_abs "$BASE_URL" > "$dst_file" 
}

links_rel_to_abs() {
    BASE_URL="$1"
    sed -r 's#((href|src)[[:space:]]*=[[:space:]]*["'"'"'])\/#\1'"$BASE_URL"'\/#ig'
}

[ -z "$2" ] && usage
[ -d "$1" ] || no_dir "$1"
[ -d "$2" ] || no_dir "$2"
[ -n "$3" ] && export SITE_TITLE="$3"
[ -n "$4" ] && export BASE_URL="$4"
SRC=$(readlink_f "$1")
DST=$(readlink_f "$2")
main "$@"
