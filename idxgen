#!/bin/bash
#
# (c) 2019-2020 Vitaly Parnas <vp330@parnas.me>
# See LICENSE for licensing information.

[ -z "$CFG_FILE" ] && CFG_FILE="./.ssg_config"
[ -f "$CFG_FILE" ] && . "$CFG_FILE" # source config file if available
#[ -z "$IGNORE" ] && IGNORE=' ! -path "*/.*" ! -path "*/_*"'
sep="#"

function name_linkify
{
    echo "${1// /-}" | tr '[:upper:]' '[:lower:]'
}

function escape_str
{
    sed -r 's/([\(\)"<>|])/\\\1/g; $!s/$/\\\\n/' | tr -d '\n'
}

# Uses 'declare' variable declarations to avoid conflicts with recursive calls
function gen_idx_from_template
{
    declare metadata_list="$1"; shift
    declare output="$1"; shift
    declare body_file="$1"; shift
    declare category="$1"; shift
    declare ignore_existing="$1"

    declare header_file="${body_file%.*}.hdr"
    declare footer_file="${body_file%.*}.ftr"
    [[ ! -f "$body_file" || ! -f "$header_file" || ! -f "$footer_file" ]] && 
        echo "$body_file, $header_file, or $footer_file not found" >&2 && return

    [ -z "$ignore_existing" ] && declare existing_idx="$output.prev" &&
        [ -f "$output" ] && mv "$output" "$existing_idx"
    eval "echo -e $(escape_str < $header_file)" > "$output"
    declare body="$(escape_str < $body_file)"
    body_anchor=$(echo -e "$body" | sed -n 's/[^<]*\(<\w\+\).*/\1/p;q')
    if [[ "$body_file" =~ categories.html ]]; then
        cats_counts=$(sed '1d' "$metadata_list" | awk -F "$sep" '{if ($5) print $5}' | sort | uniq -ci)
        while read -r COUNT CATEGORY; do
            CATEGORY_URL="categories/"$(name_linkify "$CATEGORY")
            mkdir -p "$INPUTDIR/categories"
            gen_idx_from_template "$metadata_list" \
                "$INPUTDIR/$CATEGORY_URL.html" \
                "$TEMPLATE_DIR/category.html" "$CATEGORY"
            eval "echo -e $body" >> "$output"
        done <<< "$cats_counts"
    else
        declare IFS="#"
        while read -r DATE MODIFIED TITLE HREF CATEGORY SUMMARY; do
            # Skip entries without a date if the template expects one
            [[ "$body" =~ \$DATE && -z "$DATE" ]] && continue
            [[ "$body_file" =~ category.html ]] && 
                [ ! "$CATEGORY" == "$category" ] && continue
            [[ "$body" =~ \$CATEGORY_URL && -n "$CATEGORY" ]] &&
                CATEGORY_URL="categories/"$(name_linkify "$CATEGORY")
            [[ -z "$MODIFIED" && -n "$DATE" ]] && 
                MODIFIED="$DATE" || 
                MODIFIED="$(date '+%Y-%m-%d')"
            if [[ "$body" =~ \$SUMMARY && -z "$SUMMARY" ]]; then
                html_path="$PROD_OUT/$HREF" # Requires prod directory built
                [ -z "${html_path##*/}" ] && html_path="$html_path""index.html"
                [ -f "$html_path" ] &&
                SUMMARY="$(get_description < $html_path | remove_tags_nbsp)"
			fi
            # Hack for the html escape sequences in the SUMMARY to properly eval
            eval "echo -e \"$body\"" | sed 's/\\//g' >> "$output"
            if [ -f "$existing_idx" ]; then
                found=$(grep "$HREF" "$existing_idx")
                if [ $found ]; then
                    escaped_url="${HREF//\//\\\/}"
                    sed -n '0,/'"$escaped_url"'/d;/'"$body_anchor"'/,$p' "$existing_idx" >> "$output"
                    #echo "Reusing existing"
                    rm "$existing_idx"
                    return
                fi
            fi
        done <<< $(sed '1d' "$metadata_list")
    fi
    [ -f "$existing_idx" ] && rm -v "$existing_idx"
    #echo "Processing footer"
    eval "echo -e $(escape_str < $footer_file)" >> "$output"
}

function get_description
{
    start='sub("^.*<"s"*"t"("s"[^>]*)?>","")'
    stop='sub("</"s"*"t""s"*>.*","") && x=1'
    awk -v 's=[[:space:]]' -v 't=[Pp]' "$start,$stop;x{exit}"
}

function remove_tags_nbsp
{
    sed 's#<[^>]*>##g;s#</[^>]*>##g; s#\&nbsp;# #g'
}

function gen_content_list
{
    LIST_HDR="DATE"$sep"MODIFIED"$sep"TITLE"$sep"HREF"$sep"CATEGORY"$sep"SUMMARY"
    echo "$LIST_HDR"
    cd "$1" && find -L . ! -path "*/.*" ! -path "*/_*" -iregex '.*\.\(md\|html\)' -type f -exec awk -v sep="$sep" '
    BEGIN {IGNORECASE=1}
    {if (FILENAME !~ /\.md$/) nextfile}
    {
        sub(/[ \t]+$/,""); // Trim trailing spaces
        val=$0;
        sub(/^\w+:\s*/, "", val); // Trim all but the metadata value
    }
        /^date:/{d=val} 
        /^modified:/{m=val} 
        /^title:/{t=val} 
        /^category:/{c=val} 
        /^summary:/{s=val} 
        /^status:/{st=val} 
        /^\s*$/{nextfile}
    END {
    if (st ~ /draft/) exit;
    href=FILENAME;
    sub("\\/index\\..*$", "/", href);
    sub("\\.(md|html)$", "/", href);
    sub("^\\.", "", href); 
    print d sep m sep t sep href sep c sep s}' {} \; | sort -rn
}

function help
{
    cat <<EOF
    -c|--gen-content <dir path>: generate content list in a CSV
    -x|--index <csv> <template>: generate an index (dated list) file based on template
    -h|--help: this help
EOF
}

[ -z "$2" ] && help && exit 1

cmd="$1"; shift
case "$cmd" in
    -c|--gen-content) gen_content_list "$1"; exit 0;;
    -x|--index) gen_idx_from_template "$@"; exit 0;;
    -h|--help|*) help; exit 0;;
esac

help
